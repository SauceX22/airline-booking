// In this project you will develop a database system for the Airline booking system. Your finished product should contain information about passenger, flights, payments, bags etc.  
// Each project group should go through the following steps in completing the phase 1 of the project:  
// 1.	Describe constraints, including business related, and technical constraints, such as primary keys, foreign keys, check constraints, and not null constraints, for the tables and attributes, etc.  
// 2.	Design the database, following an EER approach; then go through the normalization process to come up with a collection of tables that are in Third normal forms.   
// 3.	Use any SQL database to create the normalized tables.  
// 4.	Find out how the most recent version of your database implements the concept of triggers and then create at least one trigger for your database. For example, one such trigger could be that someone wants to book flight, your trigger must create ticket id automatically.   
// 5.	Populate the database by using SQL insert statements or with some GUI interface such as PhpMySQLAdmin in case you are using MySQL.  

// Database Systems Project (PHASE 1) High-Level Requirements   
// Due: Saturday, March 23, 2024  
// The list of requirements with constraints/business rules are as follows:  
// a)	A passenger should be able to search flights by dates, destination and source city.  
// b)	Each ticket will have a unique identification number and other details including flight dates, weight, time etc.  
// c)	Passenger can book a seat if it is not booked already. 
// d)	The system maintains information of assigned plane for a flight. The planes have various attributes including aircraft type, date of first flight, total seats, last and next dates for maintenance etc. The aircraft details are maintained separately including aircraft type, number of seats in first class, business class and economy and price of seats for each class.   
// e)	The system also maintains waitlisted passengers up to 10 seats in economy and 3 in other classes.  
// f)	There should be a maximum limit (10) seats to be booked by passenger at any time in specific flight.  
// g)	There should be a maximum limit (90) on how many days a member can reuse ticket whenever miss his/her flight.  
// h)	The system should identify fines for cancelation or missing flight.  
// i)	The system should be able to send notifications whenever the seat booked and ticket successfully purchased.  
// j)	Every passenger’s payment details should be kept.  

// We have three main actors in our system:  
// •	Admin: Mainly responsible for adding and modifying tickets.  
// •	Passenger: All passengers can search the flight, destination and source, purchase ticket, postponed/cancel their flight, book seats etc.  
// •	System: Mainly responsible for sending notifications etc.  

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    USER
}

enum Gender {
    MALE
    FEMALE
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    joinedAt DateTime @default(now())
    enabled  Boolean  @default(true)

    role    UserRole @default(USER)
    address String?
    age     Int?
    gender  Gender   @default(MALE)
    fine    Int      @default(0) // passenger only

    Tickets Ticket[]
}

model Plane {
    id                  String   @id @default(cuid())
    name                String
    nEconomySeats       Int
    nBusinessSeats      Int
    nFirstClassSeats    Int
    type                String
    lastMaintenanceDate DateTime
    firstFlightDate     DateTime

    Flights Flight[]
}

model Flight {
    id       String   @id @default(cuid())
    name     String
    date     DateTime
    duration Int // in minutes

    source          String
    sourceCode      String
    destination     String
    destinationCode String

    Plane   Plane  @relation(fields: [planeId], references: [id], onDelete: Cascade)
    planeId String

    Tickets Ticket[]

    @@index([source])
    @@index([destination])
    @@index([source, destination])
}

enum PaymentStatus {
    CONFIRMED
    PENDING
}

enum SeatClass {
    ECONOMY
    BUSINESS
    FIRSTCLASS
}

model Ticket {
    id          String    @id @default(cuid())
    weightKG    Int
    bookingDate DateTime  @default(now())
    seat        String
    class       SeatClass @default(ECONOMY)

    passengerName  String
    passengerEmail String

    paymentStatus PaymentStatus @default(PENDING)
    paymentDate   DateTime?
    price         Int

    Flight   Flight @relation(fields: [flightId], references: [id], onDelete: Cascade)
    flightId String

    BookedBy   User   @relation(fields: [bookedById], references: [id], onDelete: Cascade)
    bookedById String
}
